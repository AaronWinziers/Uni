/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.unitrier.dbis.FunctionStoreEditor;

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;
import de.unitrier.dbis.FunctionStoreEditor.URLStuff.APIURL;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.riot.Lang;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.update.UpdateAction;

import java.io.*;
import java.util.HashMap;

public class App {

	public static void main(String[] args) throws IOException {
		File folder = new File("stores");
		File[] files = folder.listFiles();

		System.out.println("=======================");
		for (File file : files) {
			int count = 0;
			System.out.println("Altering: " + file.getName());

			FunctionGetter functionGetter = new FunctionGetter(file.getAbsolutePath());
			FunctionDefinition[] functionDefinitions = functionGetter.getFunctions();
			functionGetter.close();

			String updateQuery = "PREFIX fs:<http://localhost/functionsstore#>\n" +
					"INSERT {\n";

			HashMap<String,APIURL> urlMap = getURLHash("URLS.json");

			for (FunctionDefinition funcDef : functionDefinitions) {
				String[] parts = funcDef.source.split("_");
				funcDef.source = (parts[0] + "_" + parts[2]);

				if (!urlMap.containsKey((parts[0].replace("http://localhost/f/", "") + parts[2]).toLowerCase())) {
					System.out.println("Problematic type: " + parts[0] + "_" + parts[2]);
				}

				updateQuery += funcDef.toInsert();
			}

			updateQuery += "}\n" +
					"WHERE {}";

			File newFile = initFile(file.getName());

			Model model = ModelFactory.createDefaultModel();
			model.read("newstores/" + file.getName());
			UpdateAction.parseExecute(updateQuery, model);


			FileOutputStream outputStream = new FileOutputStream(newFile);
			RDFDataMgr.write(outputStream, model, Lang.TTL);
			outputStream.close();
			model.close();
			System.out.println("Finished creating new function store");
			System.out.println("=======================");
		}

	}

	public static HashMap<String, APIURL> getURLHash(String fileName) throws FileNotFoundException {
		Gson gson = new Gson();
		File urlfile = new File(fileName);
		JsonReader reader = new JsonReader(new FileReader(urlfile));
		APIURL[] apiurls = gson.fromJson(reader, APIURL[].class);

		HashMap<String, APIURL> urlMap = new HashMap<>();

		for (APIURL apiurl : apiurls) {
			urlMap.put(apiurl.getLabel().toLowerCase(), apiurl);
			System.out.println(apiurl.getLabel());
		}

		return urlMap;
	}

	public static File initFile(String fileName) throws IOException {
		File newFile = new File("newstores/" + fileName);
		if (newFile.exists()) {
			newFile.delete();
		}
		newFile.createNewFile();
		System.out.println("New file created");

		System.out.println("Adding prefix to file");
		BufferedWriter writer = new BufferedWriter(new FileWriter(newFile));
		writer.write("@prefix fs:    <http://localhost/functionsstore#> .");
		writer.close();

		return newFile;
	}
}